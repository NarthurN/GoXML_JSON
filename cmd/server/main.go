package main

import (
	"context"
	"log"
	"net"
	"net/http"
	"os"
	"os/signal"
	"syscall"

	"github.com/NarthurN/GoXML_JSON/internal/client"
	"github.com/NarthurN/GoXML_JSON/internal/converter"
	"github.com/NarthurN/GoXML_JSON/internal/handler"
	appMiddleware "github.com/NarthurN/GoXML_JSON/internal/middleware"
	"github.com/NarthurN/GoXML_JSON/pkg/logger"
	"github.com/NarthurN/GoXML_JSON/settings"
	"github.com/go-chi/chi/v5"
	"github.com/go-chi/chi/v5/middleware"
)

func main() {
	logg, err := logger.New()
	if err != nil {
		log.Fatalf("‚ùå –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ª–æ–≥–≥–µ—Ä: %v", err)
	}
	defer logg.Close()

	logg.Log("‚úÖ –ª–æ–≥–≥–µ—Ä –∏–Ω—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

	converter := converter.NewConverter()
	logg.Log("‚úÖ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –∏–Ω—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

	client := client.NewClient()
	logg.Log("‚úÖ –∫–ª–∏–µ–Ω—Ç –∏–Ω—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

	handler := handler.NewHandler(logg, converter, client)
	logg.Log("‚úÖ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

	// –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
	r := chi.NewRouter()

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º middleware –æ—Ç chi –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
	r.Use(middleware.Logger)                          // –õ–æ–≥–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å—ã (–æ—Ç chi –≤ stdout)
	r.Use(middleware.Recoverer)                       // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –ø–∞–Ω–∏–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 500
	r.Use(middleware.Timeout(settings.ClientTimeout)) // –¢–∞–π–º–∞—É—Ç –Ω–∞ –≤–µ—Å—å –∑–∞–ø—Ä–æ—Å

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤
	// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–æ—É—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
	r.Group(func(r chi.Router) {
		r.Use(appMiddleware.Auth(logg))
		r.Post("/users", handler.Users)
	})

	// –ü—Ä–æ—Å—Ç–æ–π health-check —ç–Ω–¥–ø–æ–∏–Ω—Ç
	r.Get("/health", func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(http.StatusOK)
		w.Write([]byte("OK"))
	})

	logg.Log("‚úÖ –º–∞—Ä—à—Ä—É—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")

	// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
	srv := &http.Server{
		Addr:    net.JoinHostPort(settings.ServerHost, settings.ServerPort),
		Handler: r,
	}

	go func() {
		logg.Logf("üöÄ –°–µ—Ä–≤–µ—Ä —Å–ª—É—à–∞–µ—Ç –Ω–∞ %s", net.JoinHostPort(settings.ServerHost, settings.ServerPort))
		if err := srv.ListenAndServe(); err != nil && err != http.ErrServerClosed {
			logg.Logf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: %v", err)
		}
	}()
	logg.Log("‚úÖ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")

	// Graceful shutdown
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
	<-quit

	logg.Log("üö® –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è. –ù–∞—á–∏–Ω–∞–µ–º graceful shutdown...")

	// –î–∞–µ–º 5 —Å–µ–∫—É–Ω–¥ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
	ctx, cancel := context.WithTimeout(context.Background(), settings.ShutdownTimeout)
	defer cancel()

	if err := srv.Shutdown(ctx); err != nil {
		logg.Logf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ graceful shutdown: %v", err)
	}

	logg.Log("‚úÖ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
}
