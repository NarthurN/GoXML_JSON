package main

import (
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"strings"
	"time"
)

// JSONUser - —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ (–∫–∞–∫ –≤ –≤–∞—à–µ–º –∑–∞–¥–∞–Ω–∏–∏)
type JSONUser struct {
	ID       string `json:"id"`
	FullName string `json:"full_name"`
	Email    string `json:"email"`
	AgeGroup string `json:"age_group"`
}

// ResponseData - —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
type ResponseData struct {
	Status      string     `json:"status"`
	Message     string     `json:"message"`
	ReceivedAt  string     `json:"received_at"`
	ProcessedBy string     `json:"processed_by"`
	UserCount   int        `json:"user_count"`
	Users       []JSONUser `json:"users"`
}

func main() {
	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ—É—Ç–æ–≤
	http.HandleFunc("/users", handleUsers)
	http.HandleFunc("/", handleRoot)
	http.HandleFunc("/health", handleHealth)

	fmt.Println("üöÄ –¢–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è JSON –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
	fmt.Println("üìç –ê–¥—Ä–µ—Å: http://localhost:8081")
	fmt.Println("üéØ Endpoint –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: http://localhost:8081/users")
	fmt.Println("üí° –≠—Ç–æ—Ç —Å–µ—Ä–≤–µ—Ä –ø—Ä–∏–Ω–∏–º–∞–µ—Ç POST –∑–∞–ø—Ä–æ—Å—ã —Å JSON –º–∞—Å—Å–∏–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
	fmt.Println("üìã –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: [{\"id\":\"1\",\"full_name\":\"–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤\",\"email\":\"ivan@example.com\",\"age_group\":\"–æ—Ç 25 –¥–æ 35\"}]")
	fmt.Println("üîÑ –°–µ—Ä–≤–µ—Ä –ª–æ–≥–∏—Ä—É–µ—Ç –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ")
	fmt.Println("")
	fmt.Println("üåê –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É 8081...")

	// –ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞
	log.Fatal(http.ListenAndServe(":8081", nil))
}

// handleUsers - –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è endpoint /users
func handleUsers(w http.ResponseWriter, r *http.Request) {
	// –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å
	fmt.Printf("\nüî• [%s] –ü–æ–ª—É—á–µ–Ω %s –∑–∞–ø—Ä–æ—Å –Ω–∞ /users –æ—Ç %s\n",
		time.Now().Format("15:04:05"), r.Method, r.RemoteAddr)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞
	if r.Method != http.MethodPost {
		fmt.Printf("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –º–µ—Ç–æ–¥: %s (–æ–∂–∏–¥–∞–µ—Ç—Å—è POST)\n", r.Method)
		http.Error(w, "–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ POST", http.StatusMethodNotAllowed)
		return
	}

	// –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
	fmt.Println("üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:")
	for name, values := range r.Header {
		for _, value := range values {
			fmt.Printf("   %s: %s\n", name, value)
		}
	}

	// –ß–∏—Ç–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
	body, err := io.ReadAll(r.Body)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞: %v\n", err)
		http.Error(w, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞", http.StatusBadRequest)
		return
	}
	defer r.Body.Close()

	if len(body) == 0 {
		fmt.Println("‚ùå –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –ø—É—Å—Ç–æ–µ")
		http.Error(w, "–¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º", http.StatusBadRequest)
		return
	}

	fmt.Printf("üìÑ –ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ (%d –±–∞–π—Ç):\n%s\n", len(body), string(body))

	// –ü–∞—Ä—Å–∏–º JSON —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
	var users []JSONUser
	if err := json.Unmarshal(body, &users); err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON: %v\n", err)
		fmt.Printf("üìÑ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON: %s\n", string(body))
		http.Error(w, fmt.Sprintf("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON: %v", err), http.StatusBadRequest)
		return
	}

	fmt.Printf("‚úÖ JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω. –ü–æ–ª—É—á–µ–Ω–æ %d –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n", len(users))

	// –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
	for i, user := range users {
		fmt.Printf("   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d:\n", i+1)
		fmt.Printf("      ‚Ä¢ ID: %s\n", user.ID)
		fmt.Printf("      ‚Ä¢ –ü–æ–ª–Ω–æ–µ –∏–º—è: %s\n", user.FullName)
		fmt.Printf("      ‚Ä¢ Email: %s\n", user.Email)
		fmt.Printf("      ‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞: %s\n", user.AgeGroup)
		fmt.Println()
	}

	// –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç
	response := ResponseData{
		Status:      "success",
		Message:     fmt.Sprintf("–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ %d –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", len(users)),
		ReceivedAt:  time.Now().Format("2006-01-02 15:04:05"),
		ProcessedBy: "Test Server 8081",
		UserCount:   len(users),
		Users:       users,
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("X-Processed-By", "Test-Server-8081")
	w.Header().Set("X-Processing-Time", time.Now().Format(time.RFC3339))
	w.WriteHeader(http.StatusOK)
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º JSON –æ—Ç–≤–µ—Ç
	if err := json.NewEncoder(w).Encode(response); err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞: %v\n", err)
		return
	}

	fmt.Printf("‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É\n")
	fmt.Printf("üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n")
	fmt.Println(strings.Repeat("=", 60))
}

// handleRoot - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ø—É—Ç–∏ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
func handleRoot(w http.ResponseWriter, r *http.Request) {
	fmt.Printf("\nüìç [%s] –ó–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ—Ä–Ω–µ–≤–æ–π –ø—É—Ç—å –æ—Ç %s\n",
		time.Now().Format("15:04:05"), r.RemoteAddr)

	info := `
üöÄ –¢–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è endpoint /users

üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
   ‚Ä¢ –ü–æ—Ä—Ç: 8081
   ‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –º–µ—Ç–æ–¥—ã: POST
   ‚Ä¢ Endpoint: /users
   ‚Ä¢ –§–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö: JSON

üéØ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
   POST http://localhost:8081/users
   Content-Type: application/json

   –ü—Ä–∏–º–µ—Ä —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞:
   [
     {
       "id": "1",
       "full_name": "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤",
       "email": "ivan@example.com",
       "age_group": "–æ—Ç 25 –¥–æ 35"
     }
   ]

üîó –î–æ—Å—Ç—É–ø–Ω—ã–µ endpoints:
   ‚Ä¢ GET  /        - –≠—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
   ‚Ä¢ POST /users   - –û–±—Ä–∞–±–æ—Ç–∫–∞ JSON –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   ‚Ä¢ GET  /health  - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞

üí° –°–µ—Ä–≤–µ—Ä –ª–æ–≥–∏—Ä—É–µ—Ç –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏.
`

	w.Header().Set("Content-Type", "text/plain; charset=utf-8")
	w.WriteHeader(http.StatusOK)
	fmt.Fprint(w, info)
}

// handleHealth - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
func handleHealth(w http.ResponseWriter, r *http.Request) {
	fmt.Printf("\nüíä [%s] Health check –æ—Ç %s\n",
		time.Now().Format("15:04:05"), r.RemoteAddr)

	health := map[string]interface{}{
		"status":    "ok",
		"service":   "Test Server 8081",
		"timestamp": time.Now().Format(time.RFC3339),
		"uptime":    "running",
		"endpoints": map[string]string{
			"/":       "GET  - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ",
			"/users":  "POST - –û–±—Ä–∞–±–æ—Ç–∫–∞ JSON –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
			"/health": "GET  - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è",
		},
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	json.NewEncoder(w).Encode(health)

	fmt.Println("‚úÖ Health check –≤—ã–ø–æ–ª–Ω–µ–Ω")
}
